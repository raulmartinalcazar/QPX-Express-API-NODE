
/**
 * QPXExpressAPILib
 *
 * This file was automatically generated by APIMATIC BETA v2.0 on 02/24/2016
 */
var BaseModel = require("./BaseModel");
/**
 * Creates a instance of SliceInput
 *
 * @constructor
 */
function SliceInput() {
    this.alliance = null;     
    this.date = null;     
    this.destination = null;     
    this.kind  = "qpxexpress#sliceInput";     
    this.maxConnectionDuration = null;     
    this.maxStops = null;     
    this.origin = null;     
    this.permittedCarrier = null;     
    this.permittedDepartureTime = null;     
    this.preferredCabin = null;     
    this.prohibitedCarrier = null;     
}

SliceInput.prototype = new BaseModel();
SliceInput.prototype.constructor = BaseModel;

/**
 * Slices with only the carriers in this alliance should be returned; do not use this field with permittedCarrier. Allowed values are ONEWORLD, SKYTEAM, and STAR.
 *
 * @return {string|null}
 */
SliceInput.prototype.getAlliance = function() {
    return this.alliance;
};

/**
 * Setter for Alliance
 * 
 * @param {string|null} value 
 */
SliceInput.prototype.setAlliance = function(value) {
    this.alliance = value;
};

/**
 * Departure date in YYYY-MM-DD format.
 *
 * @return {string|null}
 */
SliceInput.prototype.getDate = function() {
    return this.date;
};

/**
 * Setter for Date
 * 
 * @param {string|null} value 
 */
SliceInput.prototype.setDate = function(value) {
    this.date = value;
};

/**
 * Airport or city IATA designator of the destination.
 *
 * @return {string|null}
 */
SliceInput.prototype.getDestination = function() {
    return this.destination;
};

/**
 * Setter for Destination
 * 
 * @param {string|null} value 
 */
SliceInput.prototype.setDestination = function(value) {
    this.destination = value;
};

/**
 * Identifies this as a slice input object, representing the criteria a desired slice must satisfy. Value: the fixed string qpxexpress#sliceInput.
 *
 * @return {string|null}
 */
SliceInput.prototype.getKind = function() {
    return this.kind;
};

/**
 * Setter for Kind
 * 
 * @param {string|null} value 
 */
SliceInput.prototype.setKind = function(value) {
    this.kind = value;
};

/**
 * The longest connection between two legs, in minutes, you are willing to accept.
 *
 * @return {int|null}
 */
SliceInput.prototype.getMaxConnectionDuration = function() {
    return this.maxConnectionDuration;
};

/**
 * Setter for MaxConnectionDuration
 * 
 * @param {int|null} value 
 */
SliceInput.prototype.setMaxConnectionDuration = function(value) {
    this.maxConnectionDuration = value;
};

/**
 * The maximum number of stops you are willing to accept in this slice.
 *
 * @return {int|null}
 */
SliceInput.prototype.getMaxStops = function() {
    return this.maxStops;
};

/**
 * Setter for MaxStops
 * 
 * @param {int|null} value 
 */
SliceInput.prototype.setMaxStops = function(value) {
    this.maxStops = value;
};

/**
 * Airport or city IATA designator of the origin.
 *
 * @return {string|null}
 */
SliceInput.prototype.getOrigin = function() {
    return this.origin;
};

/**
 * Setter for Origin
 * 
 * @param {string|null} value 
 */
SliceInput.prototype.setOrigin = function(value) {
    this.origin = value;
};

/**
 * A list of 2-letter IATA airline designators. Slices with only these carriers should be returned.
 *
 * @return {array|null}
 */
SliceInput.prototype.getPermittedCarrier = function() {
    return this.permittedCarrier;
};

/**
 * Setter for PermittedCarrier
 * 
 * @param {array|null} value 
 */
SliceInput.prototype.setPermittedCarrier = function(value) {
    this.permittedCarrier = value;
};

/**
 * Slices must depart in this time of day range, local to the point of departure.
 *
 * @return {TimeOfDayRange|null}
 */
SliceInput.prototype.getPermittedDepartureTime = function() {
    return this.permittedDepartureTime;
};

/**
 * Setter for PermittedDepartureTime
 * 
 * @param {TimeOfDayRange|null} value 
 */
SliceInput.prototype.setPermittedDepartureTime = function(value) {
    this.permittedDepartureTime = value;
};

/**
 * Prefer solutions that book in this cabin for this slice. Allowed values are COACH, PREMIUM_COACH, BUSINESS, and FIRST.
 *
 * @return {string|null}
 */
SliceInput.prototype.getPreferredCabin = function() {
    return this.preferredCabin;
};

/**
 * Setter for PreferredCabin
 * 
 * @param {string|null} value 
 */
SliceInput.prototype.setPreferredCabin = function(value) {
    this.preferredCabin = value;
};

/**
 * A list of 2-letter IATA airline designators. Exclude slices that use these carriers.
 *
 * @return {array|null}
 */
SliceInput.prototype.getProhibitedCarrier = function() {
    return this.prohibitedCarrier;
};

/**
 * Setter for ProhibitedCarrier
 * 
 * @param {array|null} value 
 */
SliceInput.prototype.setProhibitedCarrier = function(value) {
    this.prohibitedCarrier = value;
};

module.exports = SliceInput;